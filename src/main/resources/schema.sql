DROP ALL OBJECTS;

create table IF NOT EXISTS GENRES
(
    GENRE_ID   INTEGER,
    GENRE_NAME CHARACTER VARYING(30) not null,
    constraint GENRES_PK
        primary key (GENRE_ID)
);

create table IF NOT EXISTS MPA
(
    MPA_ID   INTEGER,
    MPA_NAME CHARACTER VARYING(10) not null,
    constraint MPA_PK
        primary key (MPA_ID)
);

create table IF NOT EXISTS DIRECTORS
(
    DIRECTOR_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DIRECTOR_NAME CHARACTER VARYING(50) not null
);

create table IF NOT EXISTS FILMS
(
    FILM_ID      INTEGER auto_increment,
    FILM_NAME    CHARACTER VARYING(50) not null,
    RELEASE_DATE DATE                  not null,
    DESCRIPTION  CHARACTER VARYING(255),
    DURATION     INTEGER               not null,
    MPA_ID       INTEGER               not null,
    LIKES_COUNT  INTEGER default 0,
    DIRECTOR_ID  INTEGER,
    constraint FILMS_PK
        primary key (FILM_ID),
    constraint FILMS_MPA_FK
        foreign key (MPA_ID) references MPA,
    constraint FILMS_DIRECTORS_FK
        foreign key (DIRECTOR_ID) references DIRECTORS on delete set null
);

create table IF NOT EXISTS USERS
(

    USER_ID  INTEGER auto_increment,
    EMAIL    CHARACTER VARYING     not null,
    LOGIN    CHARACTER VARYING(50) not null,
    NAME     CHARACTER VARYING(50) not null,
    BIRTHDAY DATE                  not null,
    constraint USERS_PK
        primary key (USER_ID)
);

create unique index if not exists USER_EMAIL_UINDEX on USERS (email);
create unique index if not exists USER_LOGIN_UINDEX on USERS (login);
create unique index if not exists DIRECTOR_NAME_UINDEX on DIRECTORS (DIRECTOR_NAME);

create table IF NOT EXISTS FILMS_LIKES
(
    FILM_ID INTEGER not null,
    USER_ID INTEGER not null,
    constraint FILMS_LIKES_PK
        primary key (USER_ID, FILM_ID),
    constraint FILMS_LIKES_FILMS_FILM_ID_FK
        foreign key (FILM_ID) references FILMS on delete cascade,
    constraint FILMS_LIKES_USERS_USER_ID_FK
        foreign key (USER_ID) references USERS on delete cascade
);

create table IF NOT EXISTS FRIENDS
(
    USER1_ID INTEGER not null,
    USER2_ID INTEGER not null,
    constraint FRIENDS_PK
        primary key (USER1_ID, USER2_ID),
    constraint FRIENDS_USERS_USER_ID_FK
        foreign key (USER1_ID) references USERS on delete cascade,
    constraint FRIENDS_USERS_USER_ID_FK_2
        foreign key (USER2_ID) references USERS on delete cascade
);

create table IF NOT EXISTS FILMS_GENRES
(
    FILM_ID  INTEGER NOT NULL,
    GENRE_ID INTEGER NOT NULL,
     constraint FILMS_GENRES_PK
         primary key (FILM_ID, GENRE_ID),
     constraint FILMS_GENRES_FILMS_FK
        foreign key (FILM_ID) references FILMS on delete cascade,
     constraint FILMS_GENRES_GENRES_FK
         foreign key (GENRE_ID) references GENRES
 );

CREATE TABLE IF NOT EXISTS event_type
(
    event_type_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name          VARCHAR(40) NOT NULL
);

CREATE TABLE IF NOT EXISTS operation_type
(
    operation_type_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name              VARCHAR(40) NOT NULL
);

CREATE TABLE IF NOT EXISTS reviews
(
    review_id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id     INT REFERENCES films (film_id) ON DELETE CASCADE,
    user_id     INT REFERENCES users (user_id) ON DELETE CASCADE,
    is_positive BOOLEAN NOT NULL,
    content     VARCHAR NOT NULL,
    CONSTRAINT IF NOT EXISTS "not_blank" CHECK (LENGTH(content) > 0)
);

CREATE TABLE IF NOT EXISTS review_opinion
(
    review_id INT       REFERENCES reviews (review_id) ON DELETE CASCADE,
    user_id   INT       REFERENCES users (user_id) ON DELETE CASCADE,
    is_like   BOOLEAN,
    PRIMARY KEY (review_id, user_id, is_like)
);